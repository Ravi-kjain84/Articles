LinearGAM:

import pandas as pd
from pygam import LinearGAM, s, f
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt  # This is the line you need to add


# Load and prepare your data
data = pd.read_excel('/content/Sample_Recovery_Rate_Data.xlsx')
X = data.drop('RecoveryRate', axis=1)
y = data['RecoveryRate']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the model using pyGAM
gam = LinearGAM(s(0) + s(1) + f(2))
gam.gridsearch(X_train.values, y_train.values)

# Evaluate the model
y_pred = gam.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Model interpretation: plotting
fig, axs = plt.subplots(1, 3)
titles = ['Feature 1', 'Feature 2', 'Feature 3']

for i, ax in enumerate(axs):
    XX = gam.generate_X_grid(term=i)
    ax.plot(XX[:, i], gam.partial_dependence(term=i, X=XX))
    ax.plot(XX[:, i], gam.partial_dependence(term=i, X=XX, width=.95)[1], c='r', ls='--')
    ax.set_title(titles[i])

plt.tight_layout()
plt.show()
